// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type Fuse_tracerFuseConnState struct {
	MaxRead             uint16
	MaxWrite            uint16
	MaxPages            uint16
	MaxPagesLimit       uint16
	MaxBackground       uint16
	CongestionThreshold uint16
	NumBackground       uint16
	_                   [8]byte
}

type Fuse_tracerFuseReqEvt struct {
	StartKtime uint64
	EndKtime   uint64
	InH        struct {
		Len         uint32
		Opcode      uint32
		Unique      uint64
		Nodeid      uint64
		Uid         uint32
		Gid         uint32
		Pid         uint32
		TotalExtlen uint16
		Padding     uint16
	}
	Flags     uint64
	EndFlags  uint64
	InNumargs uint8
	_         [1]byte
	InArgs    [3]struct {
		Size  uint16
		Value [128]uint8
	}
	OutNumargs uint8
	_          [1]byte
	OutArgs    [3]struct {
		Size  uint16
		Value [128]uint8
	}
	StackId   uint32
	ConnState Fuse_tracerFuseConnState
	_         [6]byte
}

// LoadFuse_tracer returns the embedded CollectionSpec for Fuse_tracer.
func LoadFuse_tracer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Fuse_tracerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Fuse_tracer: %w", err)
	}

	return spec, err
}

// LoadFuse_tracerObjects loads Fuse_tracer and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*Fuse_tracerObjects
//	*Fuse_tracerPrograms
//	*Fuse_tracerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadFuse_tracerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadFuse_tracer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// Fuse_tracerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Fuse_tracerSpecs struct {
	Fuse_tracerProgramSpecs
	Fuse_tracerMapSpecs
}

// Fuse_tracerSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Fuse_tracerProgramSpecs struct {
	TraceDoDentryOpen      *ebpf.ProgramSpec `ebpf:"trace_do_dentry_open"`
	TraceFilpClose         *ebpf.ProgramSpec `ebpf:"trace_filp_close"`
	TraceFuseRequest       *ebpf.ProgramSpec `ebpf:"trace_fuse_request"`
	TraceFuseRequestEnd    *ebpf.ProgramSpec `ebpf:"trace_fuse_request_end"`
	TraceRequestWaitAnswer *ebpf.ProgramSpec `ebpf:"trace_request_wait_answer"`
	TraceVpVringInterrupt  *ebpf.ProgramSpec `ebpf:"trace_vp_vring_interrupt"`
}

// Fuse_tracerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Fuse_tracerMapSpecs struct {
	FuseReqEvents *ebpf.MapSpec `ebpf:"fuse_req_events"`
	InflightReqs  *ebpf.MapSpec `ebpf:"inflight_reqs"`
	ReqHeap       *ebpf.MapSpec `ebpf:"req_heap"`
	Stacktraces   *ebpf.MapSpec `ebpf:"stacktraces"`
}

// Fuse_tracerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadFuse_tracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type Fuse_tracerObjects struct {
	Fuse_tracerPrograms
	Fuse_tracerMaps
}

func (o *Fuse_tracerObjects) Close() error {
	return _Fuse_tracerClose(
		&o.Fuse_tracerPrograms,
		&o.Fuse_tracerMaps,
	)
}

// Fuse_tracerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadFuse_tracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type Fuse_tracerMaps struct {
	FuseReqEvents *ebpf.Map `ebpf:"fuse_req_events"`
	InflightReqs  *ebpf.Map `ebpf:"inflight_reqs"`
	ReqHeap       *ebpf.Map `ebpf:"req_heap"`
	Stacktraces   *ebpf.Map `ebpf:"stacktraces"`
}

func (m *Fuse_tracerMaps) Close() error {
	return _Fuse_tracerClose(
		m.FuseReqEvents,
		m.InflightReqs,
		m.ReqHeap,
		m.Stacktraces,
	)
}

// Fuse_tracerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadFuse_tracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type Fuse_tracerPrograms struct {
	TraceDoDentryOpen      *ebpf.Program `ebpf:"trace_do_dentry_open"`
	TraceFilpClose         *ebpf.Program `ebpf:"trace_filp_close"`
	TraceFuseRequest       *ebpf.Program `ebpf:"trace_fuse_request"`
	TraceFuseRequestEnd    *ebpf.Program `ebpf:"trace_fuse_request_end"`
	TraceRequestWaitAnswer *ebpf.Program `ebpf:"trace_request_wait_answer"`
	TraceVpVringInterrupt  *ebpf.Program `ebpf:"trace_vp_vring_interrupt"`
}

func (p *Fuse_tracerPrograms) Close() error {
	return _Fuse_tracerClose(
		p.TraceDoDentryOpen,
		p.TraceFilpClose,
		p.TraceFuseRequest,
		p.TraceFuseRequestEnd,
		p.TraceRequestWaitAnswer,
		p.TraceVpVringInterrupt,
	)
}

func _Fuse_tracerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed fuse_tracer_bpfel_x86.o
var _Fuse_tracerBytes []byte
